"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { supabase } from "@/lib/supabase"
import { useAuth } from "@/contexts/AuthContext"
import { useTheme } from "next-themes"
import { 
  Settings, 
  Save, 
  User, 
  Building, 
  Mail, 
  Phone, 
  MapPin,
  Bell,
  Shield,
  Palette,
  Database,
  HelpCircle,
  Info,
  Sun,
  Moon,
  Monitor,
  Check,
  Loader2,
  AlertCircle,
  RefreshCw
} from "lucide-react"

interface CompanySettings {
  id: string
  company_name: string
  contact_info: any
  logo_url?: string
  created_at: string
}

interface ProfileSettings {
  id: string
  email: string
  full_name: string
  role: string
  phone?: string
  address?: string
}

export default function SettingsPage() {
  const { user, profile } = useAuth()
  const { theme, setTheme, themes } = useTheme()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [saving, setSaving] = useState(false)
  const [companySettings, setCompanySettings] = useState<CompanySettings | null>(null)
  const [profileSettings, setProfileSettings] = useState<ProfileSettings | null>(null)
  const [activeTab, setActiveTab] = useState("profile")
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
    fetchSettings()
  }, [])

  const fetchSettings = async () => {
    try {
      setError(null)
      console.log('🔄 Fetching settings...')
      
      // Fetch company settings with better error handling
      try {
        const { data: companyData, error: companyError } = await supabase
          .from('company_settings')
          .select('*')
          .limit(1)
          .single()

        if (companyError && companyError.code !== 'PGRST116') {
          console.error('❌ Error fetching company settings:', companyError)
        } else {
          console.log('✅ Company settings loaded:', companyData ? 'found' : 'none')
          setCompanySettings(companyData)
        }
      } catch (err) {
        console.error('❌ Company settings fetch failed:', err)
        // Don't set error for company settings as it's not critical
      }

      // Fetch user profile with fallback
      if (user) {
        try {
          const { data: profileData, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', user.id)
            .single()

          if (profileError && profileError.code !== 'PGRST116') {
            console.error('❌ Error fetching profile:', profileError)
            // Create fallback profile data from user
            setProfileSettings({
              id: user.id,
              email: user.email || '',
              full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || '',
              role: profile?.role || 'Staff',
              phone: '',
              address: ''
            })
          } else {
            console.log('✅ Profile loaded successfully')
            setProfileSettings(profileData)
          }
        } catch (err) {
          console.error('❌ Profile fetch failed:', err)
          // Create fallback profile
          setProfileSettings({
            id: user.id,
            email: user.email || '',
            full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || '',
            role: profile?.role || 'Staff',
            phone: '',
            address: ''
          })
        }
      }
    } catch (error: any) {
      console.error('❌ Failed to fetch settings:', error)
      setError(error.message || 'Failed to load settings')
    } finally {
      setLoading(false)
    }
  }

  const handleSaveProfile = async () => {
    if (!profileSettings || !user) return
    
    setSaving(true)
    try {
      const { error } = await supabase
        .from('profiles')
        .update({
          full_name: profileSettings.full_name,
          phone: profileSettings.phone,
          address: profileSettings.address,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id)

      if (error) throw error
      alert('Profile updated successfully!')
    } catch (error) {
      console.error('Error updating profile:', error)
      alert('Error updating profile')
    } finally {
      setSaving(false)
    }
  }

  const handleSaveCompany = async () => {
    if (!companySettings) return
    
    setSaving(true)
    try {
      const { error } = await supabase
        .from('company_settings')
        .update({
          company_name: companySettings.company_name,
          contact_info: companySettings.contact_info,
          updated_at: new Date().toISOString()
        })
        .eq('id', companySettings.id)

      if (error) throw error
      alert('Company settings updated successfully!')
    } catch (error) {
      console.error('Error updating company settings:', error)
      alert('Error updating company settings')
    } finally {
      setSaving(false)
    }
  }

  const tabs = [
    { id: 'profile', name: 'Profile', icon: User },
    { id: 'company', name: 'Company', icon: Building },
    { id: 'notifications', name: 'Notifications', icon: Bell },
    { id: 'security', name: 'Security', icon: Shield },
    { id: 'appearance', name: 'Appearance', icon: Palette },
    { id: 'system', name: 'System', icon: Database },
  ]

  return (
    <div className="space-y-6 sm:space-y-8 p-4 sm:p-0">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div className="min-w-0 flex-1">
          <h1 className="text-2xl sm:text-3xl font-bold tracking-tight text-oaw-text">Settings</h1>
          <p className="text-oaw-text-light text-sm sm:text-base">
            Manage your account and application preferences
          </p>
        </div>
        <Button 
          variant="outline" 
          size="sm"
          className="btn-secondary border-oaw-blue/20 hover:bg-oaw-blue/5 self-start sm:self-auto"
          onClick={fetchSettings}
          disabled={loading}
        >
          {loading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <RefreshCw className="h-4 w-4" />
          )}
          <span className="ml-1">
            {loading ? 'Refreshing...' : 'Refresh'}
          </span>
        </Button>
      </div>

      {loading ? (
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center space-y-4">
            <Loader2 className="h-12 w-12 text-oaw-blue mx-auto animate-spin" />
            <div>
              <h3 className="text-lg font-semibold text-oaw-text">Loading Settings</h3>
              <p className="text-oaw-text-light">Please wait while we fetch your settings...</p>
            </div>
          </div>
        </div>
      ) : error ? (
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center space-y-4">
            <AlertCircle className="h-12 w-12 text-red-500 mx-auto" />
            <div>
              <h3 className="text-lg font-semibold text-oaw-text">Error Loading Settings</h3>
              <p className="text-oaw-text-light">{error}</p>
            </div>
            <Button onClick={fetchSettings} className="btn-primary">
              <RefreshCw className="mr-2 h-4 w-4" />
              Try Again
            </Button>
          </div>
        </div>
      ) : (
        <div className="grid gap-6 lg:grid-cols-4">
          {/* Settings Navigation */}
          <Card className="card-enhanced bg-white dark:bg-gray-800 lg:col-span-1">
            <CardHeader className="pb-3">
              <CardTitle className="text-oaw-text text-lg">Settings</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <nav className="space-y-1">
                {tabs.map((tab) => {
                  const Icon = tab.icon
                  return (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id)}
                      className={`w-full flex items-center gap-3 px-4 sm:px-6 py-3 text-left text-sm font-medium transition-colors nav-link ${
                        activeTab === tab.id
                          ? "bg-oaw-blue/10 text-oaw-blue border-r-2 border-oaw-blue"
                          : "text-oaw-text-light hover:bg-oaw-blue/5 hover:text-oaw-blue"
                      }`}
                    >
                      <Icon className="h-4 w-4 flex-shrink-0" />
                      <span className="truncate">{tab.name}</span>
                    </button>
                  )
                })}
              </nav>
            </CardContent>
          </Card>

          {/* Settings Content */}
          <div className="lg:col-span-3 space-y-6">
            {/* Profile Settings */}
            {activeTab === 'profile' && (
              {/* Profile Settings */}
              {activeTab === 'profile' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <User className="h-5 w-5" />
                      Profile Settings
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      Update your personal information and preferences
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label htmlFor="fullName" className="text-oaw-text font-medium">Full Name</Label>
                        <Input
                          id="fullName"
                          value={profileSettings?.full_name || ''}
                          onChange={(e) => setProfileSettings(prev => prev ? {...prev, full_name: e.target.value} : null)}
                          className="input-enhanced"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="email" className="text-oaw-text font-medium">Email Address</Label>
                        <Input
                          id="email"
                          value={profileSettings?.email || user?.email || ''}
                          disabled
                          className="input-enhanced opacity-60"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="phone" className="text-oaw-text font-medium">Phone Number</Label>
                        <Input
                          id="phone"
                          value={profileSettings?.phone || ''}
                          onChange={(e) => setProfileSettings(prev => prev ? {...prev, phone: e.target.value} : null)}
                          className="input-enhanced"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="role" className="text-oaw-text font-medium">Role</Label>
                        <Input
                          id="role"
                          value={profileSettings?.role || profile?.role || 'Staff'}
                          disabled
                          className="input-enhanced opacity-60"
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="address" className="text-oaw-text font-medium">Address</Label>
                      <Input
                        id="address"
                        value={profileSettings?.address || ''}
                        onChange={(e) => setProfileSettings(prev => prev ? {...prev, address: e.target.value} : null)}
                        className="input-enhanced"
                      />
                    </div>
                    <Button 
                      onClick={handleSaveProfile} 
                      disabled={saving}
                      className="btn-primary"
                    >
                      <Save className="h-4 w-4 mr-2" />
                      {saving ? 'Saving...' : 'Save Profile'}
                    </Button>
                  </CardContent>
                </Card>
              )}

              {/* Company Settings */}
              {activeTab === 'company' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <Building className="h-5 w-5" />
                      Company Settings
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      Manage your company information and contact details
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {profile?.role === 'Admin' ? (
                      <>
                        <div className="space-y-2">
                          <Label htmlFor="companyName">Company Name</Label>
                          <Input
                            id="companyName"
                            value={companySettings?.company_name || ''}
                            onChange={(e) => setCompanySettings(prev => prev ? {...prev, company_name: e.target.value} : null)}
                            className="bg-white dark:bg-gray-800"
                          />
                        </div>
                        <div className="grid gap-4 md:grid-cols-2">
                          <div className="space-y-2">
                            <Label htmlFor="companyEmail">Company Email</Label>
                            <Input
                              id="companyEmail"
                              value={companySettings?.contact_info?.email || ''}
                              onChange={(e) => setCompanySettings(prev => prev ? {
                                ...prev, 
                                contact_info: {...(prev.contact_info || {}), email: e.target.value}
                              } : null)}
                              className="bg-white dark:bg-gray-800"
                            />
                          </div>
                          <div className="space-y-2">
                            <Label htmlFor="companyPhone">Company Phone</Label>
                            <Input
                              id="companyPhone"
                              value={companySettings?.contact_info?.phone1 || ''}
                              onChange={(e) => setCompanySettings(prev => prev ? {
                                ...prev, 
                                contact_info: {...(prev.contact_info || {}), phone1: e.target.value}
                              } : null)}
                              className="bg-white dark:bg-gray-800"
                            />
                          </div>
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="companyAddress">Company Address</Label>
                          <Input
                            id="companyAddress"
                            value={companySettings?.contact_info?.address || ''}
                            onChange={(e) => setCompanySettings(prev => prev ? {
                              ...prev, 
                              contact_info: {...(prev.contact_info || {}), address: e.target.value}
                            } : null)}
                            className="bg-white dark:bg-gray-800"
                          />
                        </div>
                        <Button 
                          onClick={handleSaveCompany} 
                          disabled={saving}
                          className="btn-primary"
                        >
                          <Save className="h-4 w-4 mr-2" />
                          {saving ? 'Saving...' : 'Save Company Settings'}
                        </Button>
                      </>
                    ) : (
                      <div className="text-center py-8">
                        <Shield className="h-12 w-12 text-oaw-text-light mx-auto mb-4" />
                        <h3 className="text-lg font-medium text-oaw-text mb-2">Admin Access Required</h3>
                        <p className="text-oaw-text-light">
                          Only administrators can modify company settings.
                        </p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              )}

              {/* Other Settings Tabs */}
              {activeTab === 'notifications' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <Bell className="h-5 w-5" />
                      Notification Settings
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      Configure your notification preferences
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center py-8">
                      <Bell className="h-12 w-12 text-oaw-text-light mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-oaw-text mb-2">Notification Settings</h3>
                      <p className="text-oaw-text-light">
                        Notification preferences will be available in future updates.
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}

              {activeTab === 'security' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <Shield className="h-5 w-5" />
                      Security Settings
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      Manage your account security and password
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center py-8">
                      <Shield className="h-12 w-12 text-oaw-text-light mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-oaw-text mb-2">Security Settings</h3>
                      <p className="text-oaw-text-light">
                        Password management and security options coming soon.
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Appearance Settings */}
              {activeTab === 'appearance' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <Palette className="h-5 w-5" />
                      Appearance Settings
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      Customize the look and feel of the application
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* Theme Selection */}
                    <div className="space-y-4">
                      <div>
                        <Label className="text-oaw-text font-medium mb-3 block">Theme Preference</Label>
                        <p className="text-sm text-oaw-text-light mb-4">
                          Choose how the application looks. Select a single theme, or sync with your system and automatically switch between day and night themes.
                        </p>
                      </div>
                      
                      {mounted && (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          {/* Light Theme */}
                          <div 
                            className={`relative cursor-pointer rounded-lg border-2 p-4 transition-all duration-200 hover:shadow-md ${
                              theme === 'light' 
                                ? 'border-oaw-blue bg-oaw-blue/5 shadow-sm' 
                                : 'border-gray-200 dark:border-gray-700 hover:border-oaw-blue/30'
                            }`}
                            onClick={() => setTheme('light')}
                          >
                            <div className="flex items-center space-x-3">
                              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-yellow-100 text-yellow-600">
                                <Sun className="h-5 w-5" />
                              </div>
                              <div className="flex-1">
                                <h3 className="font-medium text-oaw-text">Light</h3>
                                <p className="text-sm text-oaw-text-light">Clean and bright interface</p>
                              </div>
                              {theme === 'light' && (
                                <Check className="h-5 w-5 text-oaw-blue" />
                              )}
                            </div>
                            <div className="mt-3 h-16 rounded-md bg-gradient-to-br from-white to-gray-50 border shadow-sm flex items-center justify-center">
                              <div className="text-xs text-gray-500">Light Preview</div>
                            </div>
                          </div>

                          {/* Dark Theme */}
                          <div 
                            className={`relative cursor-pointer rounded-lg border-2 p-4 transition-all duration-200 hover:shadow-md ${
                              theme === 'dark' 
                                ? 'border-oaw-blue bg-oaw-blue/5 shadow-sm' 
                                : 'border-gray-200 dark:border-gray-700 hover:border-oaw-blue/30'
                            }`}
                            onClick={() => setTheme('dark')}
                          >
                            <div className="flex items-center space-x-3">
                              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-blue-100 text-blue-600">
                                <Moon className="h-5 w-5" />
                              </div>
                              <div className="flex-1">
                                <h3 className="font-medium text-oaw-text">Dark</h3>
                                <p className="text-sm text-oaw-text-light">Easy on the eyes in low light</p>
                              </div>
                              {theme === 'dark' && (
                                <Check className="h-5 w-5 text-oaw-blue" />
                              )}
                            </div>
                            <div className="mt-3 h-16 rounded-md bg-gradient-to-br from-gray-800 to-gray-900 border shadow-sm flex items-center justify-center">
                              <div className="text-xs text-gray-400">Dark Preview</div>
                            </div>
                          </div>

                          {/* System Theme */}
                          <div 
                            className={`relative cursor-pointer rounded-lg border-2 p-4 transition-all duration-200 hover:shadow-md ${
                              theme === 'system' 
                                ? 'border-oaw-blue bg-oaw-blue/5 shadow-sm' 
                                : 'border-gray-200 dark:border-gray-700 hover:border-oaw-blue/30'
                            }`}
                            onClick={() => setTheme('system')}
                          >
                            <div className="flex items-center space-x-3">
                              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-purple-100 text-purple-600">
                                <Monitor className="h-5 w-5" />
                              </div>
                              <div className="flex-1">
                                <h3 className="font-medium text-oaw-text">System</h3>
                                <p className="text-sm text-oaw-text-light">Sync with system preference</p>
                              </div>
                              {theme === 'system' && (
                                <Check className="h-5 w-5 text-oaw-blue" />
                              )}
                            </div>
                            <div className="mt-3 h-16 rounded-md bg-gradient-to-r from-white via-gray-200 to-gray-800 border shadow-sm flex items-center justify-center">
                              <div className="text-xs text-gray-600">Auto Preview</div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Color Scheme Info */}
                    <div className="rounded-lg bg-oaw-blue/5 border border-oaw-blue/20 p-4">
                      <div className="flex items-start space-x-3">
                        <Palette className="h-5 w-5 text-oaw-blue mt-0.5" />
                        <div>
                          <h4 className="font-medium text-oaw-text mb-1">OAW Color Scheme</h4>
                          <p className="text-sm text-oaw-text-light">
                            The application uses a professional blue color scheme optimized for aluminum workshop management. 
                            All themes maintain the OAW brand colors while adapting to your preferred light/dark preference.
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* Additional Settings Placeholder */}
                    <div className="space-y-4">
                      <div>
                        <Label className="text-oaw-text font-medium">Additional Appearance Options</Label>
                        <p className="text-sm text-oaw-text-light mt-1 mb-3">
                          More customization options coming soon
                        </p>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="rounded-lg border border-gray-200 dark:border-gray-700 p-4 opacity-50">
                          <h4 className="font-medium text-oaw-text mb-1">Font Size</h4>
                          <p className="text-sm text-oaw-text-light">Adjust text size preferences</p>
                          <Badge variant="secondary" className="mt-2">Coming Soon</Badge>
                        </div>
                        <div className="rounded-lg border border-gray-200 dark:border-gray-700 p-4 opacity-50">
                          <h4 className="font-medium text-oaw-text mb-1">Sidebar Layout</h4>
                          <p className="text-sm text-oaw-text-light">Customize navigation layout</p>
                          <Badge variant="secondary" className="mt-2">Coming Soon</Badge>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {activeTab === 'system' && (
                <Card className="card-enhanced bg-white dark:bg-gray-800">
                  <CardHeader>
                    <CardTitle className="text-oaw-text flex items-center gap-2">
                      <Database className="h-5 w-5" />
                      System Information
                    </CardTitle>
                    <CardDescription className="text-oaw-text-light">
                      View system status and application information
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid gap-4 md:grid-cols-2">
                      <div className="space-y-2">
                        <Label>Application Version</Label>
                        <div className="text-sm text-oaw-text bg-gray-50 dark:bg-gray-900 p-2 rounded">v1.0.0</div>
                      </div>
                      <div className="space-y-2">
                        <Label>Database Status</Label>
                        <div className="text-sm text-green-600 bg-green-50 dark:bg-green-900/20 p-2 rounded">Connected</div>
                      </div>
                      <div className="space-y-2">
                        <Label>Last Backup</Label>
                        <div className="text-sm text-oaw-text bg-gray-50 dark:bg-gray-900 p-2 rounded">Auto-managed</div>
                      </div>
                      <div className="space-y-2">
                        <Label>System Health</Label>
                        <div className="text-sm text-green-600 bg-green-50 dark:bg-green-900/20 p-2 rounded">Healthy</div>
                      </div>
                    </div>
                    <div className="pt-4 border-t">
                      <div className="flex items-center gap-2 text-sm text-oaw-text-light">
                        <Info className="h-4 w-4" />
                        For technical support, contact your administrator.
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}
            </>
          </div>
        </div>
      )}
    </div>
  )
}
